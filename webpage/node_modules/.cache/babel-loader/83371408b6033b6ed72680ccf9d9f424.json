{"remainingRequest":"/home/derek/workspace/VueJsProjects/FinanceAndInvestment/node_modules/babel-loader/lib/index.js!/home/derek/workspace/VueJsProjects/FinanceAndInvestment/node_modules/eslint-loader/index.js??ref--13-0!/home/derek/workspace/VueJsProjects/FinanceAndInvestment/src/storage/models/etfs.js","dependencies":[{"path":"/home/derek/workspace/VueJsProjects/FinanceAndInvestment/src/storage/models/etfs.js","mtime":1648211896351},{"path":"/home/derek/workspace/VueJsProjects/FinanceAndInvestment/node_modules/cache-loader/dist/cjs.js","mtime":1648211921485},{"path":"/home/derek/workspace/VueJsProjects/FinanceAndInvestment/node_modules/babel-loader/lib/index.js","mtime":1648211921821},{"path":"/home/derek/workspace/VueJsProjects/FinanceAndInvestment/node_modules/eslint-loader/index.js","mtime":1648211921529}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmlsdGVyIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkubGFzdC1pbmRleC1vZiI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmZ1bmN0aW9uLm5hbWUiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QudG8tc3RyaW5nIjsKaW1wb3J0ICJyZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWUiOwppbXBvcnQgX2FzeW5jVG9HZW5lcmF0b3IgZnJvbSAiL2hvbWUvZGVyZWsvd29ya3NwYWNlL1Z1ZUpzUHJvamVjdHMvRmluYW5jZUFuZEludmVzdG1lbnQvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2FzeW5jVG9HZW5lcmF0b3IiOwppbXBvcnQgU2V0dGluZ3MgZnJvbSAnQC9zZXR0aW5ncyc7CmV4cG9ydCBkZWZhdWx0IHsKICBzdGF0ZTogZnVuY3Rpb24gc3RhdGUoKSB7CiAgICByZXR1cm4gewogICAgICBldGZzOiBbXSwKICAgICAgZXRmc0ZpbHRyYXRlVmFsdWU6IHsKICAgICAgICBuYW1lOiAnJwogICAgICB9LAogICAgICBpc1Nob3dFdGZzRmlsdGVyOiBmYWxzZQogICAgfTsKICB9LAogIG11dGF0aW9uczogewogICAgc2V0RXRmczogZnVuY3Rpb24gc2V0RXRmcyhzdGF0ZSwgZXRmcykgewogICAgICBzdGF0ZS5ldGZzID0gZXRmczsKICAgIH0sCiAgICBmaWx0cmF0ZUV0ZnM6IGZ1bmN0aW9uIGZpbHRyYXRlRXRmcyhzdGF0ZSwgZXRmc0ZpbHRyYXRlVmFsdWUpIHsKICAgICAgc3RhdGUuZXRmc0ZpbHRyYXRlVmFsdWUgPSBldGZzRmlsdHJhdGVWYWx1ZTsKICAgIH0sCiAgICBjbGVhcklzU2hvd0V0ZnNGaWx0ZXI6IGZ1bmN0aW9uIGNsZWFySXNTaG93RXRmc0ZpbHRlcihzdGF0ZSkgewogICAgICBzdGF0ZS5pc1Nob3dFdGZzRmlsdGVyID0gZmFsc2U7CiAgICAgIHN0YXRlLmV0ZnNGaWx0cmF0ZVZhbHVlID0gewogICAgICAgIG5hbWU6ICcnCiAgICAgIH07CiAgICB9CiAgfSwKICBhY3Rpb25zOiB7CiAgICBpbml0RXRmczogZnVuY3Rpb24gaW5pdEV0ZnMoY29udGV4dCkgewogICAgICByZXR1cm4gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlKCkgewogICAgICAgIHZhciBldGZzLCBwYXRoLCByZXNwb25zZSwgaTsKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZSQoX2NvbnRleHQpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQucHJldiA9IF9jb250ZXh0Lm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICBldGZzID0gW10sIHBhdGggPSBTZXR0aW5ncy5BUElfSE9TVCArIFNldHRpbmdzLkFQSV9WRVJTSU9OICsgU2V0dGluZ3MuQVBJX0VURlNfUEFUSDsKICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAzOwogICAgICAgICAgICAgICAgcmV0dXJuIGZldGNoKHBhdGgsIHsKICAgICAgICAgICAgICAgICAgaGVhZGVyczogU2V0dGluZ3MuQVBJX1JFUVVFU1RfSEVBREVSCiAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgY2FzZSAzOgogICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDU7CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuc2VudC5qc29uKCk7CgogICAgICAgICAgICAgIGNhc2UgNToKICAgICAgICAgICAgICAgIHJlc3BvbnNlID0gX2NvbnRleHQuc2VudDsKCiAgICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgcmVzcG9uc2UubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgICAgICAgZXRmcy5wdXNoKHsKICAgICAgICAgICAgICAgICAgICBzZWN0b3I6IHJlc3BvbnNlW2ldLnNlY3RvciwKICAgICAgICAgICAgICAgICAgICBmdW5kczogcmVzcG9uc2VbaV0uZnVuZHMsCiAgICAgICAgICAgICAgICAgICAgbGlua3M6IHJlc3BvbnNlW2ldLmxpbmtzCiAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGNvbnRleHQuY29tbWl0KCdzZXRFdGZzJywgZXRmcyk7CgogICAgICAgICAgICAgIGNhc2UgODoKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWUpOwogICAgICB9KSkoKTsKICAgIH0KICB9LAogIGdldHRlcnM6IHsKICAgIGdldEV0ZnM6IGZ1bmN0aW9uIGdldEV0ZnMoc3RhdGUpIHsKICAgICAgcmV0dXJuIHN0YXRlLmV0ZnMuZmlsdGVyKGZ1bmN0aW9uIChldGYpIHsKICAgICAgICBpZiAoZXRmLnNlY3Rvci50b0xvY2FsZUxvd2VyQ2FzZSgpLmxhc3RJbmRleE9mKHN0YXRlLmV0ZnNGaWx0cmF0ZVZhbHVlLm5hbWUudG9Mb2NhbGVMb3dlckNhc2UoKSkgPT09IC0xICYmIGV0Zi5mdW5kcy50b0xvY2FsZUxvd2VyQ2FzZSgpLmxhc3RJbmRleE9mKHN0YXRlLmV0ZnNGaWx0cmF0ZVZhbHVlLm5hbWUudG9Mb2NhbGVMb3dlckNhc2UoKSkgPT09IC0xICYmIHN0YXRlLmV0ZnNGaWx0cmF0ZVZhbHVlLm5hbWUpIHsKICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICB9CgogICAgICAgIHJldHVybiB0cnVlOwogICAgICB9KTsKICAgIH0sCiAgICBnZXRFdGZzRmlsdHJhdGVWYWx1ZTogZnVuY3Rpb24gZ2V0RXRmc0ZpbHRyYXRlVmFsdWUoc3RhdGUpIHsKICAgICAgcmV0dXJuIHN0YXRlLmV0ZnNGaWx0cmF0ZVZhbHVlOwogICAgfQogIH0KfTs="},{"version":3,"sources":["/home/derek/workspace/VueJsProjects/FinanceAndInvestment/src/storage/models/etfs.js"],"names":["Settings","state","etfs","etfsFiltrateValue","name","isShowEtfsFilter","mutations","setEtfs","filtrateEtfs","clearIsShowEtfsFilter","actions","initEtfs","context","path","API_HOST","API_VERSION","API_ETFS_PATH","fetch","headers","API_REQUEST_HEADER","json","response","i","length","push","sector","funds","links","commit","getters","getEtfs","filter","etf","toLocaleLowerCase","lastIndexOf","getEtfsFiltrateValue"],"mappings":";;;;;;AAAA,OAAOA,QAAP,MAAqB,YAArB;AAEA,eAAe;AACXC,EAAAA,KAAK,EAAE;AAAA,WAAO;AACVC,MAAAA,IAAI,EAAG,EADG;AAEVC,MAAAA,iBAAiB,EAAE;AACfC,QAAAA,IAAI,EAAE;AADS,OAFT;AAKVC,MAAAA,gBAAgB,EAAE;AALR,KAAP;AAAA,GADI;AAQXC,EAAAA,SAAS,EAAE;AACPC,IAAAA,OADO,mBACCN,KADD,EACQC,IADR,EACc;AACjBD,MAAAA,KAAK,CAACC,IAAN,GAAaA,IAAb;AACH,KAHM;AAIPM,IAAAA,YAJO,wBAIMP,KAJN,EAIaE,iBAJb,EAI+B;AAClCF,MAAAA,KAAK,CAACE,iBAAN,GAA0BA,iBAA1B;AACH,KANM;AAOPM,IAAAA,qBAPO,iCAOeR,KAPf,EAOqB;AACxBA,MAAAA,KAAK,CAACI,gBAAN,GAAyB,KAAzB;AACAJ,MAAAA,KAAK,CAACE,iBAAN,GAA0B;AACtBC,QAAAA,IAAI,EAAE;AADgB,OAA1B;AAGH;AAZM,GARA;AAsBXM,EAAAA,OAAO,EAAE;AACCC,IAAAA,QADD,oBACUC,OADV,EACmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAChBV,gBAAAA,IADgB,GACT,EADS,EACLW,IADK,GACEb,QAAQ,CAACc,QAAT,GAAoBd,QAAQ,CAACe,WAA7B,GAA2Cf,QAAQ,CAACgB,aADtD;AAAA;AAAA,uBAEQC,KAAK,CAACJ,IAAD,EAAO;AAACK,kBAAAA,OAAO,EAAElB,QAAQ,CAACmB;AAAnB,iBAAP,CAFb;;AAAA;AAAA;AAAA,qCAE6DC,IAF7D;;AAAA;AAEhBC,gBAAAA,QAFgB;;AAGpB,qBAASC,CAAT,GAAa,CAAb,EAAgBA,CAAC,GAAGD,QAAQ,CAACE,MAA7B,EAAqCD,CAAC,EAAtC,EAA0C;AACtCpB,kBAAAA,IAAI,CAACsB,IAAL,CAAU;AACNC,oBAAAA,MAAM,EAAEJ,QAAQ,CAACC,CAAD,CAAR,CAAYG,MADd;AAENC,oBAAAA,KAAK,EAAEL,QAAQ,CAACC,CAAD,CAAR,CAAYI,KAFb;AAGNC,oBAAAA,KAAK,EAAEN,QAAQ,CAACC,CAAD,CAAR,CAAYK;AAHb,mBAAV;AAKH;;AACDf,gBAAAA,OAAO,CAACgB,MAAR,CAAe,SAAf,EAA0B1B,IAA1B;;AAVoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWvB;AAZI,GAtBE;AAoCX2B,EAAAA,OAAO,EAAE;AACLC,IAAAA,OADK,mBACG7B,KADH,EACU;AACX,aAAOA,KAAK,CAACC,IAAN,CAAW6B,MAAX,CAAkB,UAAUC,GAAV,EAAe;AACpC,YAAIA,GAAG,CAACP,MAAJ,CAAWQ,iBAAX,GAA+BC,WAA/B,CAA2CjC,KAAK,CAACE,iBAAN,CAAwBC,IAAxB,CAA6B6B,iBAA7B,EAA3C,MAAiG,CAAC,CAAlG,IACGD,GAAG,CAACN,KAAJ,CAAUO,iBAAV,GAA8BC,WAA9B,CAA0CjC,KAAK,CAACE,iBAAN,CAAwBC,IAAxB,CAA6B6B,iBAA7B,EAA1C,MAAgG,CAAC,CADrG,IAEIhC,KAAK,CAACE,iBAAN,CAAwBC,IAF/B,EAEoC;AAChC,iBAAO,KAAP;AACH;;AAED,eAAO,IAAP;AAEH,OATM,CAAP;AAUH,KAZI;AAaL+B,IAAAA,oBAbK,gCAagBlC,KAbhB,EAasB;AACvB,aAAOA,KAAK,CAACE,iBAAb;AACH;AAfI;AApCE,CAAf","sourcesContent":["import Settings from '@/settings'\n\nexport default {\n    state: () => ({\n        etfs:  [],\n        etfsFiltrateValue: {\n            name: '',\n        },\n        isShowEtfsFilter: false,\n    }),\n    mutations: {\n        setEtfs(state, etfs) {\n            state.etfs = etfs\n        },\n        filtrateEtfs(state, etfsFiltrateValue){\n            state.etfsFiltrateValue = etfsFiltrateValue;\n        },\n        clearIsShowEtfsFilter(state){\n            state.isShowEtfsFilter = false;\n            state.etfsFiltrateValue = {\n                name: '',\n            };\n        }\n    },\n    actions: {\n        async initEtfs(context) {\n            let etfs = [], path = Settings.API_HOST + Settings.API_VERSION + Settings.API_ETFS_PATH;\n            let response = await (await fetch(path, {headers: Settings.API_REQUEST_HEADER})).json();\n            for (let i = 0; i < response.length; i++) {\n                etfs.push({\n                    sector: response[i].sector,\n                    funds: response[i].funds,\n                    links: response[i].links,\n                })\n            }\n            context.commit('setEtfs', etfs);\n        },\n    },\n    getters: {\n        getEtfs(state) {\n            return state.etfs.filter(function (etf) {\n                if((etf.sector.toLocaleLowerCase().lastIndexOf(state.etfsFiltrateValue.name.toLocaleLowerCase()) === -1\n                    && etf.funds.toLocaleLowerCase().lastIndexOf(state.etfsFiltrateValue.name.toLocaleLowerCase()) === -1 )\n                    && state.etfsFiltrateValue.name){\n                    return false;\n                }\n\n                return true;\n\n            });\n        },\n        getEtfsFiltrateValue(state){\n            return state.etfsFiltrateValue;\n        },\n    }\n}"]}]}