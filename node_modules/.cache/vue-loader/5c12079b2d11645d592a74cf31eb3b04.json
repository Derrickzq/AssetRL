{"remainingRequest":"/home/derek/workspace/VueJsProjects/FinanceAndInvestment/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/derek/workspace/VueJsProjects/FinanceAndInvestment/src/components/Pages/Issuers.vue?vue&type=template&id=23d859ef&scoped=true&","dependencies":[{"path":"/home/derek/workspace/VueJsProjects/FinanceAndInvestment/src/components/Pages/Issuers.vue","mtime":1648211896351},{"path":"/home/derek/workspace/VueJsProjects/FinanceAndInvestment/node_modules/cache-loader/dist/cjs.js","mtime":1648211921485},{"path":"/home/derek/workspace/VueJsProjects/FinanceAndInvestment/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1648211922113},{"path":"/home/derek/workspace/VueJsProjects/FinanceAndInvestment/node_modules/cache-loader/dist/cjs.js","mtime":1648211921485},{"path":"/home/derek/workspace/VueJsProjects/FinanceAndInvestment/node_modules/vue-loader/lib/index.js","mtime":1648211921961}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}