{"remainingRequest":"/home/derek/workspace/VueJsProjects/FinanceAndInvestment/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/derek/workspace/VueJsProjects/FinanceAndInvestment/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/derek/workspace/VueJsProjects/FinanceAndInvestment/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/derek/workspace/VueJsProjects/FinanceAndInvestment/src/components/Pages/Banks.vue?vue&type=template&id=bd7788e8&scoped=true&","dependencies":[{"path":"/home/derek/workspace/VueJsProjects/FinanceAndInvestment/src/components/Pages/Banks.vue","mtime":1648670060755},{"path":"/home/derek/workspace/VueJsProjects/FinanceAndInvestment/node_modules/cache-loader/dist/cjs.js","mtime":1648211921485},{"path":"/home/derek/workspace/VueJsProjects/FinanceAndInvestment/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1648211922113},{"path":"/home/derek/workspace/VueJsProjects/FinanceAndInvestment/node_modules/cache-loader/dist/cjs.js","mtime":1648211921485},{"path":"/home/derek/workspace/VueJsProjects/FinanceAndInvestment/node_modules/vue-loader/lib/index.js","mtime":1648211921961},{"path":"/home/derek/workspace/VueJsProjects/FinanceAndInvestment/node_modules/cache-loader/dist/cjs.js","mtime":1648211921485},{"path":"/home/derek/workspace/VueJsProjects/FinanceAndInvestment/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1648211922113},{"path":"/home/derek/workspace/VueJsProjects/FinanceAndInvestment/node_modules/cache-loader/dist/cjs.js","mtime":1648211921485},{"path":"/home/derek/workspace/VueJsProjects/FinanceAndInvestment/node_modules/vue-loader/lib/index.js","mtime":1648211921961}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}